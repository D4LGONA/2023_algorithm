분할정복 알고리즘
주어진 문제의 입력을 분할하여 문제를 해결하는 방식의 알고리즘
n^2도 -1씩 문제의 크기가 줄어들지만, 분할정복은 절반씩 줄어들음. nlogn
문제를 분할 - 해결 - 취합 모두 해야 함

합병정렬
공간복잡도가 필요함(새 배열이 필요하기 때문) -> O(n)
배열의 원소가 2개 이상이면 :
중간 원소 인덱스를 찾아서
앞부분 재귀호출, 뒷부분 재귀호출
왼쪽소트 - 오른쪽소트 - 합병
층마다 n개만큼의 비교, logn번 반복
 - 합병: 2개의 각각 정렬된 숫자들을 1개의 정렬된 숫자로 합치는 것

퀵 정렬 -> 분할정복이지만 정복 후 분할이라는데요?
2개의 부분 문제로 분할함. pivot에 따라 그 부분 문제의 크기가 달라짐
pivot보다 작은건 모두 왼쪽, pivot보다 큰건 모두 오른쪽으로 이동.
파티션 - 소트 - 재귀호출
최악 n^2, 최선/평균 nlogn

선택 문제: n개의 숫자들 중에서 k번째로 작은 숫자를 찾는 문제
 - 최소 숫자를 n번 찾는다(n^2), 숫자들을 정렬한 후 k번째 숫자를 찾는다(nlogn)
 -> 이진탐색
pivot 정하고 큰거 오른쪽 작은거 왼쪽 넘긴다음에 찾는게 pivot보다 크면 뒤에서 찾고
아니면 앞에서 찾고... 머 그런 거라는데요
selection의 구현..
파티션을 하여 pivot의 위치 결정 - 왼쪽에서 찾거나 오른쪽에서 찾거나
왼쪽에서 찾을때는 k가 그대로, 오른쪽은 k - (1 + 왼쪽길이) 넘겨줌
좋은 분할과 나쁜 분할? : 3/4가 좋은 분할이라네요
시간복잡도 O(n)
이진탐색은 정확히 반으로, 선택알고리즘은 피봇으로 분할. 좋은 분할일 확률은
절반이라네요...

최근접 접의 쌍 찾기 - 이전에 city를... 사용
먼지 가까운지만 찾고 싶으면 sqrt를 안써도 됨 제곱상태에서 비교하셈
간단한(무식한)방법: 모든 거리 찾아보기(O(n^2))
똑똑한 방법: x좌표에 따라 정렬하고 분할하고 쭉쭉쭉...
mid기준 좌우로 제일 작은 길이만큼 x좌표가 그 안에 있는 애들끼리
비교해서 real 답을 냄
얜 또 y좌표순으로 정렬해서 비교한다는거같은데
O(nlogn)이라네요 교재에서 나온게 틀렷데요

분할정복 주의할 점
쪼갰을때 더 오래걸릴수도
취합과정도 생각해야 함.
기하에 관련된 다수의 문제가 분할정복이라네요
