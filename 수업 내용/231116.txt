knapsack
K[i, w] = 물건 1 ~ i까지만 고려, (임시)배낭의 용량이 w일때의 최대 가치
i = 1, 2, 3, ... , n이고 w = 1, 2, 3, ..., c
시간복잡도 O(nc)?
별도의 배열이 되게 한다고? 이게 무슨 말이지 파이썬은 역시 별로야

동전 거스름돈
그리디로 해결되기도 하지만 DP를 써야만 할때도 있음
문제에 주어진 요소들 : 동전이 종류, d1, d2, ..., dk(d1>d2>...>dk = 1), 거스름돈 n원

배낭문제이 DP알고리즘에서 배ㄴ아의 용량을 1키ㄹㅆㄱ ㅈㅇ가시키는 것... 1원씩 증가시켜갸며 문제를 핵려하자!!
거스름돈을 배낭의 용량과 같이 생각하도록
적은 금액을 거슬러줄때부터 쭉쭉쭉... 
c[j] = min{1<=i<k}(c[j-di]+1,c[j])??? 머라는겨
기말에는 동전의 종류와 현재 진행상황을 보여주고 다음에 뭐가 선택되느냐 한대요

DP: 최적홤 ㅜㄴ제 해결, 입력크기가 작은 부분문제ㅡㄷ르 을 모두 해결하고 그 해를 이용해 ㅡㄴ 부분문제 해결
부분문제 사이에 함축적 순서가 있음
모든 쌍 최단경로 플로이드워샬 - O(n^3) 다익스트라를ㄹO(nlogn)으ㅗ ㅏ면 O(n^2logn)까지 가능, n이 무한으로 갈떄 O(n^logn)이빠름 적을ㄷㅒ누 n^3이빠름
플로이드와햘은n^3중에엄청빠르뉴ㅕㄴ
연속행렬곱셈 - O(n^3) 이우사는 행렬ㄲ리ㅣ 곱하는 모든 부분문제들을 해결해 최지ㅓㄱ해ㅡㄹ 찾는다ㅏ
3개의 루프를돈다
부분문제크기커지는루프, 부분문제개수도는루프, 부분문제해결하기이ㅜ해마지막곱셈을몇번째할건지루프
편집거리생략
배낭문데 O(nc)
동전거스름돈O(nk)
부분문제사이에 관계를 모두 고려.
DP알고리즘ㅇ느 최적부분구조, 최적성 원칙 특성을 가지고 있음

path 출력: 멀 경유해야되는지 적어놓기??

4이후에 곱해야돼? 아니 이게 먼 소리야 ㅋㅋㅋ
양쪽에 ( ) 더하고 가운데에 x 더하고 반복하라는 것 같은데 모르겠다큰일이군 ㅋㅋㅋ
