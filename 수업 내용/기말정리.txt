4장 그리디 알고리즘

그리디 알고리즘 : 최적화 문제를 해결하는 알고리즘 욕심쟁이 알고리즘이라고 부름
그리디 알고리즘은 한번 선택된 녀석을 버리지 않는다

4-1 coin change
정수배가 아니면 문제가 생김

4-2 최소신장트리: 모든 점을 연결한 사이클 없는 트리중 간선의 합이 최소인 트리
크러스컬 알고리즘: 간선 정렬하는데 O(mlogm)시간 -> 시간복잡도 O(mlogm) -> O(nlogn)으로 표현할 수도 있음(어떤경우에인지 알아두도록?)
프림 알고리즘: 어떤 순서대로 뻗어나가는지 알아두기(다음에 추가될 간선은?)
	       시간복잡도 O(n^2)이지만 힙을 이용해서 짧은 선 찾는 시간을 줄이면 O(mlogn)가능.
	       하나의 정점에서 연결되는 정점?간선? 개수가 일정하다면 이를 O(nlogn) 점 주위에 상수개만 연결된다 <= 이게 뭔말이지
	       m = O(n)이다? 모든점이 연결되면 O(n^2)여야하지만 일정한 개수만 연결되어있으면 m=n이라 할 수 있죠

4-3 최단경로찾기: 주어진 가중치 그래프에서 어느 한 출발점에서 또 다른 도착점까지의 최단 경로를 찾는 문제
그래프 보여주고 다음 선택은 어떻게 일어날것인지 다음 확정점은 어디일지 완화는 어떻게 될것인지를 물어볼 것

4-4 부분 배낭 문제
배낭문제 / 부분배낭문제/ 0-1배낭문제
부분배낭-단위무게당 가치로 정렬해서 높은것부터 선택, O(nlogn) -> 정렬할때 걸리는 시간

4-5 set cover
U와 F를 잘 알아두도록 -> U는 만들어야하는것, F는 집합풀 
지수문제?
최적해는 구할 수 없음
시간복잡도 O(n^3)
교집합을 찾을때 O(n) -> set을 사용합니다. 한 원소가 집합 안에 있는지 알아보는데 상수시간이 걸린다고 하네요

4-6 작업 스케둘링 - 여기서는 시작시간과 끝시간이 나옴
빠른 시작시간 작업 우선
빠른 종료시간 작업 우선
긴 작업 우선
짧은 작업 우선...
시간 복잡도: O(nlogn) + O(mn) -> 정렬시간 + m개의 기계에 n개의 작업을 배치하는데 걸리는 시간

4-7 허프만 압축
가장 많이 나온 문자에 가장 적은 비트를 할당
아스키코드? utf8? 유니코드?
접두부 특성의 ㅈ아점: 코드와 코드 사이를 구분할 특별한 코드가 필요 없음. 1이 존재하면 10, 11은 없음
heap을 이용해서 구현
시간복잡도 헐 머엿지 까먹음

Dynamic Programming 동적계획 알고리즘
부분문제들 사이에 함축적 순서가 존재함. 최적화 문제를 해결하는데 사용.
분할덩복은 부분문제가 어떤부분문제에 활용될지 아는데 다이나믹은 모름 어디 사용될지..

5-1 모든 쌍 최단 경로 문제
다익스트라 이용하면 n*O(n^2) = O(n^3)
부분문제의 정의 Dijk는 점 {1,2,...,k}를 경유 가능한 점으로 고려하여 점 idㅔ서 점 j까지의 모든 경로 중 가장 짧은 경로의 거리
Dij0은 i부터 j까지 직접가는, Dij1은 i부터j까지 1을 경유하는? 이었던가...
다익스트라를 nlogn으로 구현한다고 해도 얘가 어느정도 선에서는 빠름
다음번에 어디가 갱신될 것인지 맞추는 문제. 교재에 있는 연습문제를 참고할 것
단순한 형태의 O(n^3) 알고리즘

5-2 연속행렬 곱셈 
연속된 행렬의 곱셉에는 결합법칙 허용. 계산문제 나올 것

편집거리는 패스인가

5-4 01배낭문제

5-5 코인체인지 O(nk)

7단원~~
pnp문제 다이어그램? 같이 생긴거 확잏나도록
문제 변환 과정

np컴플리트 문제를 변환하세요  일너거 나옴
subset sum -> 분할문제 이런 시그로
np완전문제들중 하나만 다항식 시간에 해결되면 모든 다른 np완전문제들이 다항식시간에 해결됨.

np하드: np컴플리트이거나 np가아닐수도?


8단둰~~ npㅘㄴ전문제의 근사치라도 풀어보자구
다항식시간에 해를찾기/모든입력에대해해를찾기/최적해찾기중 최적해찾기를포기해서 근사해만찾도록해요
-> 이걸 찾는 알고리즘이 근사 알고리즘 입니당
근사비율: 내가 말한 답과 실제답과의 비율. 근사비율은 간접적인 최적해를 통해 구해요

정점커버는 극대매칭 이용하면 근사비율이 2.0이 넘지 않는대요. 그렇지 않고 정점 하나씩 선택하는건 klnn인데 근사비율이 높아질 수 있때요

빈패킹
각각 시간복잡도와 근사비율

클러스터링

etc...










