dynamic programming
입력크기가 작은 부분문제들을 해결한 후에
그 해들을 이용하여 보다 큰 크기의 부분 문제들을 해결해
최종적으로 원래 주어진 입력의 문제를 해결

분할정복: 해결하는데 사용된 부분문제는 폐기. ( 쪼개서 합치기 )
다이나믹: 뭐가 어디에 사용될지 모름. ( 작은 것부터 풀기 )

5.2 연속 행렬 곱셈: 연속된 행렬들의 곱셈에 필요한 원소간의 최소 곱셈 횟수를 찾는 문제
3x4, 4x2 => 3x2, 24번
행렬곱은 이웃하는 애들끼리만 가능
개수 n! ??? 이라?? 네요 ?? n -> 행렬개수
문제크기가 2인거, 3인거, 4인거 ... 답 모두 구해 놓음
문제크기가 커질수록 문제개수가 작아짐, 비교횟수도 늘어남
헐.. 3중루프라 시간복잡도가 O(n^3)이래요
i부터 j까지 계산한 거에 마지막은 k번이다 -> 이걸 저장하면 순서도 알수있대요
아니면 값만 알수 있음
기말고사에는 어떤 순서로 업데이트가 되는 지 다음 비교는 먼지 계싼은 어케되는지 나온대요 !!

5.1. 모ㄷ든 쌍 최단경로 문제 : 각 쌍의 점 사이의 최단경롱를 찾는 문제ㅔ
다익스트라를 n번수행 - O(n^2logn) - 가장 짧은걸 ㅊ자을때 힙을 사용 해요 근데 좀 느린 logn이라 는데요? 무한대로갈때 빠르대
다익스트라는 계수가 큰 nlogn이래요 n^3짜리 다익스트라보단 플로이드 워샬이 빠르 대요
하지만 다익스트라를 nlogn으로 구현하면 무한대로 갈때 다익스트라가 빠르고, 어느 정도는 플로이드워샬이 빠르대요

플로이드 워샬 알고리즘 - O(n^3)
매우 간단함 그러나 다익스트라보다 느리다 n^3중에서 가장 빠름
알려진방법의 최단거리? 직통거리랑 경유거리중에 빠른녀석 갱신 ??????
Dijk = 점 {1,2,-,k}를 경유 가능한 점으로 고려하여, 점 i에서 점 j까지의 모든 경로 중에서 가장 짧은 경로의 거리
점 1에서 점 k까지 모든 점을 반드시 경유하는 경로는 아님?
i에서 j까지 직통길일수도.. 아하 Dij1이 1을 무조건 지나는게 아니고 j까지 가는 길 중 가장 짧은 녀석 이군
기말은 표를 보여주고 다음엔 뭐가 갱신 될까요? 가 나온다고 ㅏ하네요.. ㅇ음수 빙용도 가능 하대요
바로가거나 1을 경유
바로가거나 1을경유하거나 2를경유
..
반복

i에서 j까지 갈때 0~k를 경유해 가는 방법의 최소 값.



